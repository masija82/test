Spring Boot와 Next.js의 통합 아키텍처 설계 및 구현

## 개요

본 문서에서는 Spring Boot 기반의 RESTful API와 Next.js 기반의 프론트엔드 웹 애플리케이션을 통합하는 아키텍처를 설계하고, 이를 실제로 구현한 과정을 설명한다. 이를 통해 서버-클라이언트 간의 데이터 흐름을 원활하게 하고, 높은 성능과 효율성을 달성할 수 있는 방법을 제시한다. 또한 Spring Boot와 Next.js의 특성을 살리면서 발생할 수 있는 문제들과 이를 해결하는 방법도 다룬다.

## 시스템 아키텍처

Spring Boot는 RESTful API 서버 역할을 하며, Next.js는 SSR(Server-Side Rendering)과 클라이언트 사이드 렌더링(CSR)을 지원하는 프론트엔드 프레임워크로 사용된다. 이 아키텍처에서는 Spring Boot가 API 서버로서 데이터를 처리하고, Next.js가 사용자 인터페이스(UI)를 담당한다. 두 시스템은 HTTP 요청과 응답을 통해 데이터를 교환한다.

- **Spring Boot API 서버**:
  - RESTful API 제공
  - MySQL 데이터베이스와의 연동
  - JWT를 사용한 인증
  - Service Layer와 Repository Layer를 통한 비즈니스 로직 처리

- **Next.js 프론트엔드**:
  - 서버사이드 렌더링(SSR) 지원
  - React 컴포넌트 기반 UI 구현
  - Axios를 사용하여 API 호출 및 데이터 처리

## 주요 기술 스택

1. **Spring Boot**:
   - Java 11 이상
   - Spring MVC, Spring Data JPA, Spring Security
   - MySQL 데이터베이스
   - JWT(Json Web Token) 기반 인증 시스템

2. **Next.js**:
   - Node.js 16 이상
   - React 18
   - Axios를 통한 HTTP 요청 처리
   - Tailwind CSS를 통한 스타일링

3. **데이터베이스**:
   - MySQL: 사용자 정보를 저장하고 관리하기 위한 관계형 데이터베이스 사용

4. **보안**:
   - JWT를 이용한 인증 및 권한 관리
   - HTTPS 프로토콜을 통해 보안 강화

## Spring Boot API 서버 구현

Spring Boot를 이용한 RESTful API 서버는 주로 클라이언트의 요청을 처리하고, 필요한 데이터를 반환하는 역할을 한다. 예를 들어, 사용자의 로그인 정보를 검증하고, JWT를 발급하는 API를 구현할 수 있다. 또한, 사용자 데이터를 CRUD(Create, Read, Update, Delete) 방식으로 처리하는 API도 제공된다.

```java
@RestController
@RequestMapping("/api/auth")
public class AuthController {

    private final AuthenticationService authService;

    @Autowired
    public AuthController(AuthenticationService authService) {
        this.authService = authService;
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody LoginRequest loginRequest) {
        String token = authService.authenticate(loginRequest);
        return ResponseEntity.ok("Bearer " + token);
    }
}
```

- 위 코드는 로그인 요청을 받아 JWT를 반환하는 간단한 로그인 API이다. `AuthenticationService` 클래스에서 로그인 로직을 처리하고, 성공적으로 인증이 완료되면 JWT 토큰을 클라이언트에 반환한다.

## Next.js 프론트엔드 구현

Next.js는 기본적으로 서버사이드 렌더링(SSR)을 지원하여 SEO(검색엔진 최적화)와 페이지 로딩 성능을 향상시킨다. 또한, React를 사용하여 동적인 UI를 구성하고, Axios를 통해 Spring Boot API와 데이터를 주고받는다.

```javascript
import axios from 'axios';
import { useState } from 'react';

function LoginPage() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/auth/login', { username, password });
      localStorage.setItem('token', response.data);
      // 로그인 성공 후 처리
    } catch (error) {
      console.error("로그인 실패:", error);
    }
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Login</button>
      </form>
    </div>
  );
}

export default LoginPage;
```

- 위 코드는 사용자 로그인 페이지를 구현한 예시로, 사용자가 입력한 사용자명과 비밀번호를 Spring Boot API로 전송하고, 로그인 성공 시 JWT 토큰을 로컬 스토리지에 저장한다.

## 데이터베이스 설계

MySQL 데이터베이스는 사용자 정보를 저장하기 위한 테이블을 포함한다. 예를 들어, 사용자 테이블은 아래와 같은 구조로 설계될 수 있다.

```sql
CREATE TABLE users (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

- `users` 테이블은 사용자 ID, 사용자명, 비밀번호, 역할(role), 생성 시간을 저장한다. 비밀번호는 암호화하여 저장하며, 역할은 `ADMIN` 또는 `USER`와 같은 값을 가질 수 있다.

## 보안 및 인증

JWT(Json Web Token)를 사용하여 인증을 처리한다. 사용자가 로그인하면, Spring Boot 서버는 해당 사용자의 정보를 기반으로 JWT를 생성하여 클라이언트에 반환한다. 클라이언트는 이후 모든 API 요청 시 JWT를 헤더에 포함하여 인증을 진행한다.

```java
public String generateToken(User user) {
    return Jwts.builder()
            .setSubject(user.getUsername())
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + 3600000)) // 1 hour
            .signWith(SignatureAlgorithm.HS512, secretKey)
            .compact();
}
```

- 위 코드에서는 `generateToken` 메서드를 통해 JWT를 생성하고, 이를 클라이언트에 전달하여 이후 API 요청 시 사용한다.

## CORS 설정

Cross-Origin Resource Sharing(CORS) 설정을 통해, 다른 출처의 클라이언트에서 API를 요청할 수 있도록 허용한다. Spring Boot에서는 `@CrossOrigin` 어노테이션을 사용하여 이를 간단하게 설정할 수 있다.

```java
@CrossOrigin(origins = "http://localhost:3000")
@RestController
@RequestMapping("/api")
public class UserController {
    // API 메서드들
}
```

- 위 코드는 `http://localhost:3000`에서 오는 요청만 허용하도록 CORS를 설정하는 예시이다.

## 배포 및 운영

최종적으로 개발한 Spring Boot API와 Next.js 프론트엔드를 배포한다. Spring Boot 애플리케이션은 `JAR` 파일로 패키징하여 AWS EC2 인스턴스나 Heroku와 같은 클라우드 서비스에 배포할 수 있다. Next.js 애플리케이션은 Vercel이나 Netlify와 같은 서비스를 통해 배포할 수 있다.

- **Spring Boot**: `java -jar app.jar`
- **Next.js**: `next build && next start`

## 결론

Spring Boot와 Next.js를 통합하여 웹 애플리케이션을 개발하면, 효율적인 백엔드와 빠르고 동적인 프론트엔드를 결합할 수 있다. 이 아키텍처는 확장성과 유지보수성을 고려하여 설계되었으며, 실제 운영 환경에서 높은 성능을 발휘할 수 있다. 개발 중 발생할 수 있는 다양한 문제들에 대해 사전에 계획하고 해결책을 마련함으로써 안정적인 시스템을 구축할 수 있다.
